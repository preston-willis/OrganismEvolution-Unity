// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update

struct Agent {
    float2 position;
    float angle;
    int isAlive;
};

RWStructuredBuffer<Agent> Agents;
RWTexture2D<float4> TrailMap;
RWTexture2D<float4> AgentsTexture;
int width;
int height;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

[numthreads(8, 8, 1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Agent agent = Agents[id.x];

    if (agent.isAlive == 0) {
        return;
    }

    float angle = agent.angle;

    int posx = (int)agent.position.x;
    int posy = (int)agent.position.y;

    //float2 direction = float2(cos(rand(float2(agent.angle, posy))*6.3),sin(rand(float2(agent.angle, posx))*6.3));
	float2 direction = float2(cos(angle), sin(angle));
    float2 newPos = agent.position + direction * float2(2, 2);

    if (newPos.x >= width || newPos.x < 0 || newPos.y >= height || newPos.y < 0)
    {
        if (newPos.x < 0 && direction.y < 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x);;
        } 
        else if (newPos.x < 0 && direction.y > 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x);;
        } 
        else if (newPos.x >= width  && direction.y > 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x) - 3.1415;
        }
        else if (newPos.x >= width && direction.y < 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x) - 3.1415;
        }  
        else if ((newPos.y < 0 || newPos.y >= height) && direction.x > 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x);
        } 
        else if ((newPos.y < 0 || newPos.y >= height) && direction.x < 0) 
        {
            Agents[id.x].angle = atan(-direction.y/direction.x) - 3.1415;
        } 
        newPos.x = min(width-1, max(0, newPos.x));
		newPos.y = min(height-1, max(0, newPos.y));
    }

    Agents[id.x].position = newPos;

    TrailMap[int2(posx, posy)] = 1;


}

#pragma kernel Diffuse
RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8, 8, 1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{

    if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

    float4 sum = 0;
	float4 originalCol = TrailMap[id.xy];
	// 3x3 blur
    int offset = 3;
	for (int offsetX = -offset; offsetX <= offset; offsetX ++) {
		for (int offsetY = -offset; offsetY <= offset; offsetY ++) {
			int sampleX = min(width-1, max(0, id.x + offsetX));
			int sampleY = min(height-1, max(0, id.y + offsetY));
			sum += TrailMap[int2(sampleX,sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
    float4 oldValue = TrailMap[id.xy];

    TrailMap[id.xy] = max(0, oldValue - 0.005);
    float diffuseWeight = saturate(0.5 * 1.5);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);
    float4 outVal = max(0, blurredCol - 0);

    if (oldValue.w > 0.99) {
        for (int offsetX = -3; offsetX <= 3; offsetX ++) {
		    for (int offsetY = -3; offsetY <= 3; offsetY ++) {
                int sampleX = min(width-1, max(0, id.x + offsetX));
			    int sampleY = min(height-1, max(0, id.y + offsetY));
                AgentsTexture[int2(sampleX, sampleY)] = float4(1,0,0,1.0);
                DiffusedTrailMap[int2(sampleX, sampleY)] = float4(1,0,0, outVal.w);
            } 
        }
    }
    else {
         DiffusedTrailMap[id.xy] = outVal;
         AgentsTexture[id.xy] = 0;
    }
}

#pragma kernel RenderAgents
[numthreads(8, 8, 1)]
void RenderAgents (uint3 id : SV_DispatchThreadID)
{
    Agent agent = Agents[id.x];
    //AgentsTexture[int2(agent.position.x, agent.position.y)] = 1;

}